type: edu
files:
- name: banking/banking.py
  visible: true
  text: "import secrets\n\nclass Card:\n    \n    def __init__(self, card_number,\
    \ pin = None, balance = 0):\n        #if pin == None:\n        #    self.set_pin()\n\
    \        \n        self.card_number = card_number\n        self.pin = pin\n  \
    \      self.balance = balance\n    \n    def get_number(self):\n        return\
    \ self.card_number\n    \n    def get_balance(self):\n        return self.balance\n\
    \    \n    def set_pin(self, pin = None):\n        if pin == None:\n         \
    \   pin = []\n            for i in range(4):\n                pin.append(str(secrets.randbelow(10)))\n\
    \            pin = ''.join(pin)\n        \n        self.pin = pin\n        return\
    \ pin\n    \n    def auth(self, pin):\n        return self.pin == pin\n\n# storage\
    \ for cards, lol\nclass CardStorage:\n\n    def __init__(self, iin):\n       \
    \ self.storage = []\n        self.iin = iin\n        pass\n    \n    def add(self,\
    \ card_obj):\n        if not isinstance(card_obj, Card) or self.find(card_obj.get_number())\
    \ != None:\n            return\n        \n        self.storage.append(card_obj)\n\
    \        \n    def remove_card(self, card_number):\n        #TODO\n        pass\n\
    \    \n    def find(self, card_number):\n        for card_obj in self.storage:\n\
    \            if card_obj.get_number() == card_number:\n                return\
    \ card_obj\n        return None\n        \n    def generate_num(self):\n     \
    \   while True:\n            card_number = []\n            for i in range(9):\n\
    \                card_number.append(str(secrets.randbelow(10)))\n            \n\
    \            #TODO Luhn sum\n            card_number.append('0')\n           \
    \ \n            card_number = self.iin + ''.join(card_number)\n            if\
    \ self.find(card_number) == None:\n                return card_number\n      \
    \          \n    def create_card(self):\n        card_number = self.generate_num()\n\
    \        card_obj = Card(card_number)\n        pin = card_obj.set_pin()\n    \
    \    self.add(card_obj)\n        return {'card_obj': card_obj, 'pin': pin}\n\n\
    storage = CardStorage('400000')\nstage = []\ncurrent_card = None\n\nwhile True:\n\
    \    if len(stage) == 0:\n        print(\"1. Create an account\")\n        print(\"\
    2. Log into account\")\n        print(\"0. Exit\")\n        action = input().strip()\n\
    \        if action == '1':\n            stage.append('create')\n        elif action\
    \ == '2':\n            stage.append('login')\n        elif action == '0':\n  \
    \          stage.append('exit')\n            \n    elif stage[0] == 'create':\n\
    \        print(\"Your card has been created\")\n        response = storage.create_card()\n\
    \        \n        print(\"Your card number:\")\n        print(response['card_obj'].get_number())\n\
    \n        print(\"Your card PIN:\")\n        print(response['pin'])\n        \n\
    \        stage.pop()\n    \n    elif stage[0] == 'login':\n        print(\"Enter\
    \ your card number:\")\n        card_number = input().strip()\n        print(\"\
    Enter your PIN:\")\n        pin = input().strip()\n        \n        card_obj\
    \ = storage.find(card_number)\n        \n        if card_obj != None and card_obj.auth(pin):\n\
    \            print(\"You have successfully logged in!\")\n            current_card\
    \ = card_obj\n            stage.pop()\n            stage.append('panel')\n   \
    \     else:\n            print(\"Wrong card number or PIN!\")\n            stage.pop()\n\
    \            continue\n    elif stage[0] == 'panel':\n        print(\"1. Balance\"\
    )\n        print(\"2. Log out\")\n        print(\"0. Exit\")\n        action =\
    \ input().strip()\n        if action == '1':\n            print(\"Balance: \"\
    \ + str(current_card.get_balance())) \n        elif action == '2':\n         \
    \   print(\"You have successfully logged out!\")\n            current_card = None\n\
    \            stage.pop()\n        elif action == '0':\n            stage.pop()\n\
    \            stage.append('exit')\n    elif stage[0] == 'exit':\n        print(\"\
    Bye!\")\n        break\n"
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest.exceptions import WrongAnswer
    from hstest.test_case import CheckResult
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase
    import random
    import re

    card_number = ''
    pin = ''
    are_all_inputs_read = False


    def get_credentials(output: str):
        number = re.findall(r'^400000\d{10}$', output, re.MULTILINE)
        if not number:
            raise WrongAnswer('You are printing the card number incorrectly. '
                                       'The card number should look like in the example: 400000DDDDDDDDDD,'
                                       ' where D is a digit.\nMake sure the card number is 16-digit length and '
                                       'you don\'t print any extra spaces at the end of the line!')

        PIN = re.findall(r'^\d{4}$', output, re.MULTILINE)
        if not PIN:
            raise WrongAnswer('You are printing the card PIN incorrectly. '
                                       'The PIN should look like in the example: DDDD, where D is a digit.\n'
                                       'Make sure the PIN is 4-digit length and you don\'t print any extra spaces at the'
                                       ' end of the line!')

        return number[0], PIN[0]


    def test_card_generation(output: str, value_to_return):
        global card_number, pin, are_all_inputs_read
        are_all_inputs_read = False
        credentials = get_credentials(output)
        card_number = credentials[0]
        pin = credentials[1]
        return value_to_return


    def test_difference_between_generations(output: str, value_to_return):
        global card_number, pin, are_all_inputs_read
        credentials = get_credentials(output)
        another_card_number = credentials[0]

        if another_card_number == card_number:
            return CheckResult.wrong('Your program generates two identical card numbers!')
        are_all_inputs_read = True

        return value_to_return


    def test_sign_in_with_correct_credentials(output: str, value_to_return):
        global card_number, pin
        return '{}\n{}'.format(card_number, pin)


    def test_output_after_correct_sign_in(output: str, value_to_return):
        global are_all_inputs_read
        are_all_inputs_read = True
        if 'successfully' not in output.lower():
            return CheckResult.wrong(
                'There is no \'successfully\' in your output after signing in with correct credentials')
        return value_to_return


    def test_sign_in_with_wrong_pin(output: str, value_to_return):
        global card_number, pin
        wrong_pin = pin
        while pin == wrong_pin:
            wrong_pin = ''.join(list(map(str, random.sample(range(1, 10), 4))))
        return '{}\n{}\n'.format(card_number, wrong_pin)


    def test_output_after_wrong_pin(output: str, value_to_return):
        global are_all_inputs_read
        are_all_inputs_read = True
        if 'wrong' not in output.lower():
            return CheckResult.wrong(
                'There is no \'wrong\' in your output after signing in with incorrect credentials')
        return value_to_return


    def test_sign_in_with_wrong_card_number(output: str, value_to_return):
        global card_number, pin
        wrong_card_number = card_number
        while wrong_card_number == card_number:
            temp = [4, 0, 0, 0, 0, 0]
            for _ in range(10):
                temp.append(random.randint(1, 9))
            wrong_card_number = ''.join(list(map(str, temp)))
        return '{}\n{}\n'.format(wrong_card_number, pin)


    def test_output_after_wrong_card_number(output: str, value_to_return):
        global are_all_inputs_read
        are_all_inputs_read = True
        if 'wrong' not in output.lower():
            return CheckResult.wrong(
                'There is no \'wrong\' in your output after signing in with incorrect credentials')
        return value_to_return


    def is_passed_luhn_algorithm(number):
        luhn = [int(char) for char in str(number)]
        for i, num in enumerate(luhn):
            if (i + 1) % 2 == 0:
                continue
            temp = num * 2
            luhn[i] = temp if temp < 10 else temp - 9
        return sum(luhn) % 10 == 0


    def test_luhn_algorithm(output: str, correct_num_of_cards):
        global are_all_inputs_read

        numbers = re.findall(r'400000\d{10,}', output, re.MULTILINE)

        for number in numbers:
            if len(number) != 16:
                return CheckResult.wrong(f'Wrong card number \'{number}\'. The card number should be 16-digit length.')
            if not is_passed_luhn_algorithm(number):
                return CheckResult.wrong('The card number \'{}\' doesn\'t pass luhn algorithm!'.format(number))

        if len(numbers) != correct_num_of_cards:
            return CheckResult.wrong(
                f'After creating {correct_num_of_cards} cards, found {len(numbers)} cards with correct format\n'
                f'The card number should be 16-digit length and should start with 400000.')

        are_all_inputs_read = True
        return '0'


    class BankingSystem(StageTest):

        def generate(self):
            return [
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_card_generation(output, '1'),
                        lambda output: test_difference_between_generations(output, '0')
                    ]),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_card_generation(output, '2'),
                        lambda output: test_sign_in_with_correct_credentials(output, None),
                        lambda output: test_output_after_correct_sign_in(output, '0')
                    ]),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_card_generation(output, '2'),
                        lambda output: test_sign_in_with_wrong_pin(output, None),
                        lambda output: test_output_after_wrong_pin(output, '0')
                    ]),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_card_generation(output, '2'),
                        lambda output: test_sign_in_with_wrong_card_number(output, None),
                        lambda output: test_output_after_wrong_card_number(output, '0')
                    ]),
                TestCase(
                    stdin=[
                        '1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1',
                        lambda output: test_luhn_algorithm(output, 11),
                    ])
            ]

        def check(self, reply: str, attach) -> CheckResult:
            if are_all_inputs_read:
                return CheckResult.correct()
            else:
                return CheckResult.wrong('You didn\'t read all inputs!')


    if __name__ == '__main__':
        BankingSystem('banking.banking').run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/projects/109/stages/592/implement#comment
status: Solved
record: 1
